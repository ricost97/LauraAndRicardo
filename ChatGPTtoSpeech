from pathlib import Path
from openai import OpenAI
import sounddevice as sd
import soundfile as sf
import speech_recognition as sr
import json
import os


def texttospeech(speech):

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    # Access the content
    content = speech.choices[0].message.content # Check https://platform.openai.com/docs/guides/text-generation

    speech_file_path = Path(__file__).parent / "speech.mp3"
    response = client.audio.speech.create(
      model="tts-1",
      voice="alloy",
      input=content
    )

    response.stream_to_file(speech_file_path)

    return speech_file_path

def playaudio(file_path): # Check https://python-sounddevice.readthedocs.io/en/0.4.6/examples.html
    data, fs = sf.read(file_path)
    sd.play(data, fs)
    status = sd.wait()  # Wait until file is done playing
    return status

def promptchatgpt(user_prompt): # Check https://platform.openai.com/docs/guides/text-generation
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": user_prompt}
        ]
    )

    return response

def listen_for_wake_word(wake_word):

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    audio_file_path= "C:\\Users\\betsy\\OneDrive\\Desktop\\Laura\\LauraAndRicardo\\wake_audio.mp3"

    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        print("Listening for wake word...")

        while True:  # Continuous listening loop
            try:
                # Listen for the first phrase and extract it into audio data
                audio_data = recognizer.listen(source, timeout=4)
                print("Processing audio...")
                # Save the audio to a file
                with open(audio_file_path, "wb") as audio_file:
                    audio_file.write(audio_data.get_wav_data())
                with open(audio_file_path, "rb") as audio_file:
                # Transform speech to text using OpenAi Speech API
                    transcription = client.audio.transcriptions.create(
                    model="whisper-1", 
                    file=audio_file
                    )
                print(f"Recognized: {transcription.text}")

                # Check if the recognized text contains the wake word
                if wake_word in str.lower(transcription.text):
                    print("Wake word detected!")
                    return True
            except sr.WaitTimeoutError:
                print("Listening timeout, retrying...")
                continue
            except sr.UnknownValueError:
                print("Could not understand audio, retrying...")
                continue
            except sr.RequestError as e:
                print(f"Could not request results; {e}")
                continue

def listen_for_prompt():

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    audio_file_path= "C:\\Users\\betsy\\OneDrive\\Desktop\\Laura\\LauraAndRicardo\\prompt_audio.mp3"

    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        print("Listening for prompt...")

        while True:  # Continuous listening loop
            try:
                # Listen for the first phrase and extract it into audio data
                audio_data = recognizer.listen(source, timeout=10)
                print("Processing audio...")
                # Save the audio to a file
                with open(audio_file_path, "wb") as audio_file:
                    audio_file.write(audio_data.get_wav_data())
                with open(audio_file_path, "rb") as audio_file:
                # Transform speech to text using OpenAi Speech API
                    transcription = client.audio.transcriptions.create(
                    model="whisper-1", 
                    file=audio_file
                    )
                print(f"Recognized: {transcription.text}")

                print("Prompt recognizd!")
                return transcription.text
            except sr.WaitTimeoutError:
                print("Listening timeout, retrying...")
                continue
            except sr.UnknownValueError:
                print("Could not understand audio, retrying...")
                continue
            except sr.RequestError as e:
                print(f"Could not request results; {e}")
                continue

if __name__ == "__main__":

    user_prompt = ""

    while True:

        if listen_for_wake_word(wake_word="hello") == True:
            user_prompt += listen_for_prompt()

        response = promptchatgpt(user_prompt)

        user_prompt += response.choices[0].message.content

        print(type(response))

        speech_file_path = texttospeech(response)

        playaudio(speech_file_path)

        print("Done!")
